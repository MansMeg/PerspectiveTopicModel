// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/PerspectiveTopicModel.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// init_count_cpp
List init_count_cpp(DataFrame state, List constants);
RcppExport SEXP PerspectiveTopicModel_init_count_cpp(SEXP stateSEXP, SEXP constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type state(stateSEXP);
    Rcpp::traits::input_parameter< List >::type constants(constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(init_count_cpp(state, constants));
    return rcpp_result_gen;
END_RCPP
}
// per_sampler_cpp
List per_sampler_cpp(DataFrame state, List count_matrices, List priors, List constants);
RcppExport SEXP PerspectiveTopicModel_per_sampler_cpp(SEXP stateSEXP, SEXP count_matricesSEXP, SEXP priorsSEXP, SEXP constantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type state(stateSEXP);
    Rcpp::traits::input_parameter< List >::type count_matrices(count_matricesSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    Rcpp::traits::input_parameter< List >::type constants(constantsSEXP);
    rcpp_result_gen = Rcpp::wrap(per_sampler_cpp(state, count_matrices, priors, constants));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int PerspectiveTopicModel_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP PerspectiveTopicModel_RcppExport_registerCCallable() { 
    R_RegisterCCallable("PerspectiveTopicModel", "PerspectiveTopicModel_RcppExport_validate", (DL_FUNC)PerspectiveTopicModel_RcppExport_validate);
    return R_NilValue;
}
